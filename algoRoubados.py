__author__ = 'CAlves'
import itertools
import urllib, urllib.request, urllib.parse, urllib.error

protein_dictionary = {"His":"H",
                      "Gln":"Q",
                      "Pro":"P",
                      "Arg":"R",
                      "Leu":"L",
                      "Asp":"D",
                      "Glu":"E",
                      "Ala":"A",
                      "Gly":"G",
                      "Val":"V",
                      "Tyr":"Y",
                      "Ser":"S",
                      "Cys":"C",
                      "Trp":"W",
                      "Phe":"F",
                      "Asn":"N",
                      "Lys":"K",
                      "Thr":"T",
                      "Ile":"I",
                      "Met":"M"}

def genomekmers(genome, k):
    kmers = {}
    freqs = {}
    positions = {}
    for i in range(len(genome)-k):
        kmers[genome[i:i+k]] = kmers.get(genome[i:i+k], 0) + 1
        positions[genome[i:i+k]] = positions.get(genome[i:i+k], []) + [i]
        f = kmers[genome[i:i+k]]
        if f>1:
            freqs[f-1].remove(genome[i:i+k])
        freqs[f] = freqs.get(f,[])+[genome[i:i+k]]
    return kmers, freqs, positions

def patternmatching(pattern, genome):
    kmers, freqs, positions = genomekmers(genome,len(pattern))
    #if len(positions)!=0: output =  positions[pattern]
    #else: output=-1
    #print (" ".join('{}'.format(i) for i in output))
    print (kmers)
    print (freqs)
    print (len(positions))
    #return output

def topkmers(genome, k):
    kmers, freqs, positions = genomekmers(genome,k)
    output = freqs[max(freqs.keys())]
    print (" ".join(output))
    return output

def reversecomplement(genome):
    function = {"A":"T", "T":"A", "C":"G", "G":"C"}
    output = [function[x] for x in genome[::-1]]
    return "".join(output)

def positionskmers(genome, k):
    positions = {}
    for i in range(len(genome)-k):
        positions[genome[i:i+k]] = positions.get(genome[i:i+k], []) + [i]
    return positions

def isthereaclump(l, k, t, L):
    for i in range(len(l)-(t-1)):
        if l[i+(t-1)] + (k-1) - l[i] <= L-1:
            return True
    return False

def clumpfinder(genome, k, t, L):
    pos = positionskmers(genome, k)
    clumps = {key:value for key,value in pos.items() if len(value)>=t and isthereaclump(value, k, t, L)}
    return clumps.keys()

def skew(genome):
    output = [0]
    count = 0
    for x in genome:
        if x == "G":
            count = count + 1
        if x == "C":
            count = count - 1
        output = output + [count]
    return output

def minskew(genome):
    t = skew(genome)
    l = [i for i,n in enumerate(t) if n == min(t)]
    return l

def appmatchpat(p, q, d):
    count = 0
    for x, y in zip(p,q):
        if x != y:
            count = count + 1
        if count > d:
            return False
    return True

def appmatch(pattern, genome, d):
    pos = []
    k = len(pattern)
    l = len(genome)
    for i in range(l-k):
        if appmatchpat(pattern, genome[i:i+k], d):
            pos = pos + [i]
    return pos

def ball_edit_distance_d(pattern, d):
    output = []
    indexes = range(len(pattern))
    for i in itertools.combinations(indexes,d):
        for j in itertools.product("ACGT", repeat=d):
            s = list(pattern)
            for k in range(d):
                s[i[k]] = j[k]
            output = output + ["".join(s)]
            # print i, j, "resulta:", "".join(s)
    # This generating function is not very efficient. In particular it over generates several patterns.
    # That's the reason for the "set" in the next line.
    return list(set(output))

def countaproxkmers(genome, k, d):
    kmers = {}
    balls = {}
    for i in range(len(genome)-k):
        # print i, "out of", len(genome)-k, "-",
        l = balls.get(genome[i:i+k], ball_edit_distance_d(genome[i:i+k],d))
        for kmer in l:
            kmers[kmer] = kmers.get(kmer,0)+1
    return kmers

def mostfrequentapproxkmers(genome,k,d):
    # print "Starting counting"
    kmers = countaproxkmers(genome, k, d)
    # print "Done counting"
    top = max(kmers.values())
    m = [k for k,v in kmers.items() if v==top]
    print ("Result:")
    for i in m:
        print (i)
    return m

def countaproxkmersandreversecomp(genome, k, d):
    kmers = {}
    balls = {}
    for i in range(len(genome)-k):
        # print i, "out of", len(genome)-k, "-",
        g = genome[i:i+k]
        l1 = balls.get(g, ball_edit_distance_d(g,d))
        h = reversecomplement(g)
        l2 = balls.get(h, ball_edit_distance_d(h,d))
        for kmer in l1+l2:
            kmers[kmer] = kmers.get(kmer,0)+1
    return kmers

def mostfrequentapproxkmersandreverse(genome,k,d):
    # print "Starting counting"
    kmers = countaproxkmersandreversecomp(genome, k, d)
    # print "Done counting"
    top = max(kmers.values())
    m = [k for k,v in kmers.items() if v==top]
    print ("Result:")
    for i in m:
        print (i)
    return m

def t_to_u(n):
    if n == "T":
        return "U"
    else:
        return n
def u_to_t(n):
    if n == "U":
        return "T"
    else:
        return n

def DNAtoRNA(genome):
    g = list(genome)
    return "".join(map(t_to_u,g))

def RNAtoDNA(genome):
    g = list(genome)
    return "".join(map(u_to_t,g))

def protein_translation(genome):
    g = DNAtoRNA(genome)
    splitted_g = [g[0+i:3+i] for i in range(0, len(g), 3)]
    if len(splitted_g[-1]) != 3:
        splitted_g = splitted_g[:-1]
    trans = [codon_table[c] for c in splitted_g]
    return "".join(trans)
#-----------------------------------------------------------------------------------------
url = "https://stepic.org/media/attachments/lessons/96/RNA_codon_table_1.txt"
table_file= urllib.request.urlopen(url)

codon_table = {}
for line in table_file:
    l = line.split()
    if len(l) != 1:
        codon_table[l[0]] = l[1]
    else:
        codon_table[l[0]] = ""



g = "AUGGCC"
s = [g[0+i:3+i] for i in range(0, len(g), 3)]
print (s)
print (s[-1])
print (len(s[-1:]))
d = [codon_table[c] for c in s]
"".join(d)

protein_translation("AUGGCC")


protein_table = {}
for k,v in codon_table.items():
    protein_table[v] = protein_table.get(v,[])+ [k]








genoma='CAATTCTGGTTCGCCAGGGCGTGTCCAGGTTGCACCGACCGGTTCTCTGCGGCATCCCGACGTCGACATATCACAGCCGAGCGCTCGGTTCTCTGAAGCCGAGGACGCACAGAAACCCGGTTGTTGACTCACCACGGATACACGTAGCGAAAACGTAACCATCCAGCTTAGAGCGCCGCGTTAGTTTCTTCGGGCGATCCCCGGCGGCAAACAGAGCTGCCGCGAGAGCTATATAAAACCGCCCGGGGCTCCACCAGCCGCACAAAAAATCTTAAAGGTAGGGGAAGAACGCTAGGCCCAGCCTCTGGATGGTCTAGGTGATACTAGAAAAAGAGACTTTGGTTGAGCAAACTCTGCTGCTTTGAACAACTGTCGTTCGCGTTGCAAGGAGGACGATGAAGACGCTAAAGGCCTAAGATCCCGATGAGTGGCACCGGGGCACTCCGATTGCGCGTCATCTTCACCGTATCTCAGAATCGAATACAGGACTATCCAACTAGGCTCTCTACGGGCGCACTTCGATTACGCGTCATCCCAGCACCGGTGCCGATCTGTTCCGTGTCATAATGGGTCGCACCAGCTGGGGCTATCCGTGTATGAACGTTTTTGTAGTCCCCCTTCCTGATTTGTGGGCCAGTCTTGGCTCTCCGGGGCAGGCACCAAAGCGGCTTTGATGGCTTGGTATCATACTCTGTGAGGCTTCGTAAAGAGGGTAGACGGGTTCTTTCACAGACACAAACACTACTGAAGCGAGGAGGGATCCTATTCCGACATGCACTTTCGCAGAGTTCGAGCAGGGTATCTTACTGGAGCGGGCGTAGGGGACCAACGCCACAAACGCTGATAATTACTGCCCAGGAATAGTCTCGTGTACTTCTCTAGACCTTATGCCAAGGTGCCTTGGTAGTCGCCGCTGCAACAACGCAAAACCAAGAGCGTCTCCCGTAGGTAGCTTGGCAGCCCCCGTCCCGAGATTGTATGCTCGCACTCCTTTCGTTCAACTCAATGGCATGAGAAGTCTGAGCGCTCGACCCATCAGCTGGGGGCCAAGAGACCAAAGAATTACGGAGCTGACTTGATCGGTGTTAGCTAAATCTCCCATTAGAAAGAGTCAAGAATCTGCGCCGGTGCTCACTATAAGTTCATATGTTTCGACAAGCGCACCTAAAAATTGTGCAGGACCAAATGGCGGTCAAGAAAATTGCGCCTTGCTCGCAGGCAGTAAACAACTGGGATACCTAATACCAGGAACGGCGTGGCCAGTAAATTAAACCCTCTCCGGTACCTATAGAATGAAATATGGGACTAGGTCTGGATTCATGATGCCCACCAGAATATAGTAATGGCCTCCGCAATGGGATCGACGATATAGTCAATCTCGCAGCGTAATTTTTTCTCACTCGACGGCAGGGCTTAACCGGGTTCGTATTTAATATGCTATCTCCTATCGGGGGGTACTTGGAGCACTCTCCGGAGTTACTGGCCACAAATGCATACTACTAGGCGTTAGGTGGTTGTCCGTGATTCCTTTTAATCGTGATAGCCTCGGTAGTGTGTCTATACGAGGGTGGAAGGACTGGAGGCGAACACACCGAGACAGCTATGACCCGCAATAGATCTGCGCCGGTAGATCTCCAGTTTCGTAATGGTATCTTAACATACAAGACATTCGGAGGGCAGCCAGCGTGGAGGCCGGAAACATAATCCGTGTGTTGGCTATTAGGAGAATAGGACGGCCAGGCTGAACCCCTTGCTCACACGGTTAATCAGCGCAGAAAGGGCACGATGAAGGGGGGCGATGTAATGTCATTACTTCCAGGTTTCCGCTAGTCACGATCCACTATTCTAATCGTTCTTACCTGTCTCGTAAAGGGATAATTATCTTCTACAAAATTGAAGTAGTCACCTTCCTGTCCGACAGCTGCTCCGAGTTGCTAAGTCGGTGCCACTGAGAGTCTGTACCAACTAAATTTCCTTATACCTGAGTAACACTTTTCCGCTCGCTCTACCTTACCGACCGGCTTACGCACTGCAAGCATTGGTAAGATTAGAATTGCACAAACAGCGGCCAGACGAGTGTTCTTACCACTTTTCTTTCCCACCTAGACAACTAGACTTAGCAAAGGCCGTTAAAAAAAAACGTGTACGACGAAAGCTCCGTGTGTCTAGCGGAGGAGACATATACCTCTGGGGCTGGAGTAGAATGACCTGATCACCGCTTGATAATTGATCGAATGACCAAGGTGCGCCCGGGATGTACGCTTTTTTGGTTATCGATTTTAACAAGTTTGCCGTTAACCACAGGATGGGGATCTATATGCTCCGGATTGTCCCGATTTCCCAAATGCGCCGACAACAGTGGCCTGCGTCCGACATAGTTTCGTGTGGGTATTGCTTTAGGCCGTAACAATGGACCGTTGAAAGGTATGGGGTGTGATAAGTACTTAAAGAGCGTCGTGTCAAATTCTAATGTCGGTCCCTGCTAGATTCGCTTGCGTTCATCATGCCAAGTCATCACAAAGTAGCGGACATCACACAACAGAAGTTGTACGTTTTATTAGGCGCTAAGTAGAAGACCAAGGTTGGATTAGACTCTTATGAAGCTTGGGGGATTAAGCGAGCTCTGTTGCATGGCGACTTGCCGCTGCCAATTATAATCAAAAAGCCGCGTGTTGAATGTCATTTATGTACCGACAGGTGCACTTCGGTTACGTGTCATATGCACAATGAGATGTTTGGTTAGTGATACGCGCTCAGGTTCGGGGAGACAGTCTTGGCGTGAGCTGCACAGTATAAGAAGGGGAATTAGAATAACGTGGGAGCCCCCCCCCGGCCTGGGATGAAATTGGAGCGCCGACTCCGACTGATTGGGGCCGCGCTAATGCCTGCTCACGGGTGGGTGGTCGCGACGGCCCATTTTTTGGTTATGCAGTTTTACGTGAAACAGCCCTCGCGGTATATTGCGACATCGGAAGCCCTGCTACACGACGGGAGCGGAACGATTTCTTGTCATTCATTCAGGTTCGTTCCCCTTTGGCGGTAAAGCCCTAATCGAAGAAATTGGATTTGCCGGGTGCTTCCCCTGGCGCTCCGGAGTTACGGCCCCTCTCGCGTCGGGAGCTGCCTTCTTTCTTATCCAGACATCAATGGACTCGGGAACCGATCACTTACTTTCAATCCTCAAAAGATTATTGCGAGAGATCAACTCGGAAAAAGAAACAAAATATACTCATTCTGCGCGCCGTTTCGCGGGTAAATGGCGACGGGGTAACGGTAGGAGAATCGGCTTTAAAAATGACTAGGAATCGATCAGCCCCTGTCTAGGGCGCCACGGAGGGCGTCGAGCTGTAACGATGAAGCTATACGTTATTCTTGATCAGTGTGTCTATGAGTTATGGGAGTTCAGACATCCCTCCCACGCTTGAGTGGCGTGACATGCGCTTAGGGTCACTTCTACTCAAGGTCGCAGGTAAGTTACTTGACCCTGTGTCCCGGTGCAACACCCGTAGTCGGCGCCTCTGCCATGGGGATGAACAACATCTCGTAGGTCAAGATCATGGGGCTTGGCTGCGCTTTATGAGTCAAATGTTCGCCGCCAAAGGAGGTAATCACCGCGGCACGCGCCATGCGGAGAATTTCAAGGAGAGCTTCGCTGACGATAGAGTATCCGATCATACATGGGGCCTGGGCCTATTAAGCCAGGTTCCCTGGCAGTCCGTGTCATGTCACACACATAGCGATTCTTGCGTGCGAGGCAGACATAGCAGTCAGTCCGGGCTACTCGACACTTACCCGCGTACGACTGTTCTCCCATGCTCGGGCATAATGCTCACTATGCGTACAGGCGCTGAACGATTTCTCGTCATCCGCTTTATCCCGAGCAATAAATACCTGTCTGCATACGCCGCGCATTACACTTCTTCTCCATAGTTCCTACGTCACTGTAGAAGTGGTCAGGCGCTACGCATAACGTCGTACGATCAGGGAGCGTGCTAGGGGCACCTGCACGAAACCTAGACAATTTAGGTCCATCCGGCACGAATAAGTGGATAGTGGCGATCGCTTTCCATAGGAAGAGTGGGTCACACCTTCCAGTGGCTACTTCACTTATGCGGTTTGTACTTGCAATTGGGTTCATATGACACGCAATCGGAGTGCACCTGTGGTCCAGATCGCATCGCCGTGATTACTGAGGCGTAGTTGCTGGACCATCTCTATTGAGAAGGTACTATTCCGATAGAGGCTTGAGTGGCCGGGACAACATACCGTTCTATAGTACCGGAGCCGACCTATTCCTAGTCATACGTGGCACCACTCCTAAGTCCGTTATTAGGGATGCGGTTGCGCTACTCCACCCTTCTCGATTACGGAAGACTGCTTTATGCTACTCGGGTTCTCGTTAGTTACGTAGACCCATAGACTGAGGACCCATCTCGGAAAGGATAAATGCCTCAGAGTAGGTAACACGTTTAGCTATTCATCGCATGGCTTATTTTTAAGCTTCTCCCGTTGAGAGGCGCTGGTAACTAAATGCCGTGCCCAGAGAGTTTAGATGTCAAGATCCCCTGCTGTAACAAACCTCTCACAAGACACTTCATGGAAGATGATAGACCGTGGACGTAGCCTTGAGCAGTGAGAGCACATGGTAGTGCTTGTAGTGGTGTAATCTCAGGCCTCATCGATCGCGCCTGTTTCGTATGACCCGAAATCGGTCGGCTCCTGTGTACGATGTCATCAGCGACACACGTTCACAGCCGCTCATCACTCAGATAGCGATCCGTACGCTGTTTACACAGCACTTATGTTTAGTTGCTATGCCCAGCTGACGGGGGCCGAACGATTGCGAGTCATTCAGCACCGCGTCCATTATTATTCATGACCCGGAATCGCTCAGCGCCGGTGCTACGATTATAAACAAGCCCACCAAATCAATGCTGACTCGGGGTAAGGCGAGGTAAGGAATCACACGAAGGAGGATTAGCGATCGTCATCAGCCCGGCCCTGCTAAACCTTGACATGACCCGGAATCGATCCGCCCCAGTCGAGCGCTGTAAACTAGAAGACGTCGATTGCGGTAGTATAAAGACCACCCGCACCGAATCGACGACAAAATTACAGATCAATTAGCCTCGTCGACCCCCCCAAGCTTAGGTGACTTTTTGTTTCGCCCAGGCTCTAATGGCGTTATAGGAGGATCTAGGACTACGTTTTAAAGAAAACGCAGTTTGCCCGTGTTTAGACTCTCATCATTACTTCCTTAGAAATGACTCCTAAGGTTTGACGTTGAGATACGGTAGCGCTTCTGTGGCGATGACCTAGTCTTCGCACCAGATGGTATAGGGACTCCGGATCTTTTAACTCATTCGTCCTGGTACCACCAGGCGCTGTACTAATAGTGACGCCTGCGATCCAGCACGAACTGATTGTGGCCCTGAGATATGGAGTCGTGCAAAATCGGCGGAAGCTCACGGTCTTCGCTTCCGTACACTGGGCATGGTCTCTCCAGATAATTGCGAGTGGGTCTGAGCGTGCCTGGTTACATACTCGCGTGGAGTCGGTTGAATTTTAACTGTGAACATGTGTAAGGATGCAGGAATGAACAGCCCTTGCCCCGAGCTGTGCTGTACCGAGCCCTAAGGCAGACCAACACCGTGATTTACATATGCGCGTGTATCTGGTTCGCCTTAAAATCTACCACGTAATGTGAGCCAGGCGTATTAAAGGAGGAGCCAATCGGAGGCTCCAATCAGCCGGAAAGCCTGACCGCAGAGTTTGTGTAGTTCGGCACGTTAATGACAATGTTCCACAGTCGCTAGAGTCTGGATCACTCCAGTATGATGTGGCAAGTTGTTTAATATTTTTTAATGCCACAGATAGCTATCCCCCGCACCATATGCAGTTAAGTTCCCCATCCGCGTCTCTGTAATGGTTACCCTCAATTTCGGGTCGGGGTTGAGTACACCCACTGCCAGTGAGGCAGCTGGGACAATAGCGCGCCAATCGCAGCCTACCTCGCACGTGATATCTCTGGATCCGGCCCAACGGAAATCCTAGTTACTAAAAAAGTCTAATAGCTATATGCTAGGGATTTGGGGTGACTTAAGGAAGTGGCTTGTGAATGCAGCTCGTGTTAGTTTAGCGCTAACTATCGTGAGTCTCTGCGATAGTAAGAGAACTTAACCATATTCCACGGCTCAAGTGATTTTCACGCAGAGAGGGGTCCGTCATGCTCTCCCCTCCCGAGCAACCTGAAATCGCCTTTTCGTCTTGGAGGCCCATGTGCTCCTTGAACTCGCTGGGACGGGAGCGCTCCTATTACGAGTCATCTTGGACACGGCCTTACGGATTAGTTCGATTAACCTCGTTCACCAAGTTCGCCGTGTGTAAATGTTGCTTAGGTGCGATCAAAGCATTCTGGTTAGAACAATCGGAACCCGCGACACCGCGCCCTATTGTGCCACTCAAGTATGTGCACTTCGGATACCGCCTTTCGAGGTTGGCAGACGCTATGAACATGACTCCGTAGCAAACGCTTACACACACAGCAGATGCAAGTAGGGATTCGGATAGACCTATCGCCATCACATCGTGTGTGACACAGGTAGAACCACATGTCGCATGACACAAGATCTTGGCTTCGGGTTATCCTTTAGTCAGATTCTACTTATAAGGCGGTGATTACGCCAGCAAGGATGCGATGACCGATAGTGTCAGACTTGCAGAAGACTGTGCCCCTCTTCCCGACTCGACAAAGCAGAGGAAATTAGTCCACACCCTCATACCGGCATGCACCGGGGCCGACCGGTTACGGGTCATTGCATTCTAGGTGAGGCCCAATTGGGGTCCAATTCATCGAGCTGTCCTCCCCATCGCCTCGGGAGGTACCGACGGACATCTTTGCATCGAAAGTCACACCTGAACATCTCCCGCCTCGTAGTCCGATAGCGAGAAACCGCAGCCGACGGACTTGGCCGGCAGCTAGTTGTGAAGCTCGAGCGTTTGCGATGTAGTAGATTGTGTAAGGGTCTGCTAGGGTGCCACGTAGGACGACGCGGTAGGCAGCAGGGGCTCCGGGGCTCAGGGCGGTTTACTGGACTCTCATAGGCATTTACTTATGCGTATTGAATCAGACAGGGGCGCTCCGATTGCGAGTCATTGCTTCTGCAGATTAGACAGACCGATAGGCATTGCACGGTTAGATGCACCTGGCCGCTCGGTAGTGTACAAATTCTAGGATTTCCTTAGGTTTATCTCGAACTAGAGATGGCATTGAGCCTTTCGTACTGCATGCTCGCAGTTTCTAGAATGAACGTACCTTGCCTCTATCGCGTGCAAGTCATACCGGTGCGCTACGGTTACGTGTCATGTAACAAAGGCTTCGGTAGCCCAAATGGCTGGTCCCATACTACTTCAAGTACACATGGGCTTCCGGCGAGATCCTTCGCACGGAGCGACAGGGGCACTCCGGTTACGCGTCATGTAGAGTTACTTATGTACAACGATCATTGTTCAGTATAGTCCCACTCTCTGGTGTGTGCTAAGCGCAACTAGAGATGACCCCCAGCACGGGACTTGGTTTTGGGTTTATCGCAATGGCTAAGCTCTTGCGGTGACGACATAAAAACGTTACTTCAGCTACCCGTGGGTTCGCACCTCGTCAGGTCATAGCCATCGGGACAAGCAGCAAAGAGCCAGAATCAGTTCGGTCAGCCGTGCTCCAATGAATCTGATGTTGAGCTCGACCGGGGTCGTCCAGTGCTGCATTACGGCTGCTAGTAACGTCGTGGATTTCCTAGCCGCTCTATACTGTTTTAAGCTTTTTACACCTGTTTCAATGAACACTAGAGACGCCATTAGATTGTTAGCCAAGGACGCGGGGTTATAACGGGCTCAGTAGCCTTACACGACAGCATCGGTCTCTGGGGGGGAATTCAGTACGCCTTCGGACACGAGGATGGCGCGCGCGATTAGCGAAAAACAATACCAGGGAACTAGCCTTTGGGATAACCTAGGTCATTTCCCGTCGTATTATTCACCTGACAGTCGCTTACCCAGATGCCTGTTAAGTCGCGCTAACAAAGCTTTACCTTTAACTCAGGGTCGGTACAAGGATCACGCCTGGGCACTTCAATTCTGTATTGCTGCTAGACACACTCCGGACGTCTTCTAGGTACCGCCTGGTTTGATCAAACGCGTTGAGCAGTTTATATCGGTCTGGTTTGTTAAATCCGTTTTCCATACAACGGCGAATACCTAGGCGTGACCCCACAGGCGCGGACCTATTTCTCGTCATGTACGTAAGCCTACCGAAGGGTCATCTTCTAAGTACCGGAGGTCCTGAGCGCTTTTGACGACTACCAGCGCCACAAGAAGGAGCCGTAGCAGGACGTTCAGGGAGGTGTACCCTGTCAGCCCATTTACCATAAATAGTGCAAGCCCTTGCATTCCTGCTACAATACGTAGGGGAGGTGAGAAATGAAGTTGCAGTAGCCGATCCTCCAGTTGACTTATGGACATTTAAGTACGGCCCAAGCTAGGGCTGTATTATGAATTGAACTTCAAATTCACCCTTAGCATGCCGAACTCTACTTTGATTGACTCTAGATCTCGTCATTTAAGTCCACTGCAGGCGAGACCATGCAACTAACAGGTTTCGTTGGATCACAAACAGTGATTAACTCGTACGTGGTCGGATCCGAAAGTTAAAGGTGGGCTCTATGTTCTCAATGCCCTATCGCTACTCAAATGGCGCCCGTCAGAGTCAGCAGCATACGGCTGGTGCTCTTACTTTTGGTTGTGCATGCAATCACGTGCCGACGTAGGATATCGACGACCGGTTGTAGCAATAAGGTACCGATGCCCACGGGGACACTGTGTTAATACAATCCGCGCCTATGGCCTGAAGGTCGTCCTGCCAACCAAAAGCAGGCCCTGCGTAGTATACCTACGTCTTAACGGGCAGGCGGGCCTATACGATGCCGTTCCTCTTTCAGTCACCCCTAAGTCTATGAGAACGGCTCGGAGTGTCTTCTATCATTGTACGTTATTTGTGAAGGACAAGCTATGCAGTAATTGGCGGTGCCTCTCTCTTCATGTCAAGCTTTGATACCGATACTCCGCTAATGTACCAATTTACGGCACGTTTCGTGCGCAGACT'
#padrao='AAAGAGGTGTTTGAACCTCATTACTAT'
print (patternmatching('ATTTaaaaTTTXXTTTTTCCC', genoma))
